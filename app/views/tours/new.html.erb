<% content_for :head do %>
    <title><%= t('tour.new') %></title>
<% end %>

<% content_for :javascript_includes do %>
    <script type="text/javascript"
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCtWBCKJwtHq7ME82vk3d7eUsRknvzgrAQ&sensor=false">
    </script>
<% end %>

<% content_for :css do %>
  #tour_map {
    height:475px;
    width:475px;
    border: 0px;
    box-shadow: none;
  }
  
  .info_window {
    width: 320px
  }
<% end %>

<% content_for :javascript do %>
  <script type="text/javascript">
    var DEFAULT_ZOOM = 13;
    var DEFAULT_HEIGHT = 81;
    var MAX_PHOTOS = 3;
    
    var persps = {};
    var myOptions;
    var placemark;
    var map;
    var infoWindow;    
    
    function updateTags(perspective) {
      var rawHTML = '<ul>';
      for (var i=0; i<perspective.tags.length; i++) {
        rawHTML += '<a href="#" id="tag_';
        rawHTML += perspective.tags[i];
        rawHTML += '" class="tag_filter_trigger tag_link">';
        rawHTML += '<li class="tags';
        rawHTML += '">#';
        rawHTML += perspective.tags[i];
        rawHTML += "</li></a>";
      }
      rawHTML += '</ul>';
      return rawHTML;
    }
    
    function createMarker(perspective) {
      var marker = new google.maps.Marker({
        position: new google.maps.LatLng(perspective.ploc[0], perspective.ploc[1]),
        icon: placemark,
        shape: shape,
        map: map,
        title: perspective.place.name
      });
      google.maps.event.addListener(marker, 'click', function(){
        if (infowindow.getMap() && infowindow.getPosition() === marker.getPosition()) {
          infowindow.close();
        } else {
          var infoWindowHTML = '<div class="info_window">';

          infoWindowHTML += '<div class="info_name">';
          if (perspective.url !== null) {
            infoWindowHTML += '<a href="' + perspective.url + '"  onclick="javascript:openWindow(this.href);return false;">' + perspective.place.name + '</a>';
          } else {
            infoWindowHTML += '<a href="/places/' + perspective.place.id + '" onclick="javascript:openWindow(this.href);return false;">' + perspective.place.name + '</a>';
          }
          infoWindowHTML += '</div>';
          
          if (perspective.tags.length > 0) {
            infoWindowHTML += '<div class="info_cat_and_tags">';
            infoWindowHTML += updateTags(perspective);
            infoWindowHTML += '</div>';
          }
          
          if (perspective.memo !== null && perspective.memo.length > 0) {
            infoWindowHTML += '<div class="info_memo">' + perspective.memo + '</div>';
          }

          if (perspective.url !== null) {
            infoWindowHTML += '<div class="info_url"><a href="' + perspective.url + '" onclick="javascript:openWindow(this.href);return false;"><%= t('perspective.web_link') %></a></div>';
          }

          if (perspective.photos.length > 0) {
            var height = <%= @height %> - DEFAULT_HEIGHT;
            var pics = '<div class="info_pics">';

            for (var i=0; i<perspective.photos.length; i++) {
              if (i < MAX_PHOTOS) {
                pics += '<span class="info_pic"><img class="info_pic_thumb" src="' + perspective.photos[i].square_url + '"></span>';
              } else {
                pics += '<span class="hidden_pic"><img class="info_pic_thumb" src="' + perspective.photos[i].square_url + '"></span>';
              }
            }
            if (perspective.photos.length > MAX_PHOTOS) {
              pics += '<div class="more_photos">+' + (perspective.photos.length - MAX_PHOTOS) + " more</div>";
            }

            pics += '</div>';

            infoWindowHTML += pics;
          }

          infowindow.open(map, marker);
          infowindow.setContent(infoWindowHTML);
          
          infowindow.setPosition(marker.getPosition());
          google.maps.event.trigger(map, 'idle');
        }
      });
      marker.setVisible(false);
      return marker;
    }
    
    function updatePerspectives(perspectiveList) {
      for (var i=0; i < perspectiveList.length; i++) {
        if (typeof persps[perspectiveList[i]['place_id']] === "undefined") {
          persps[perspectiveList[i]['place_id']] = perspectiveList[i];
          persps[perspectiveList[i]['place_id']]['marker'] = createMarker(perspectiveList[i]);
        }
      }
      updateMap();
    }
    
    function updateMap() {
      var currentBounds = map.getBounds();

      for (var persp in persps) {
        if (currentBounds.contains(persps[persp]["marker"].getPosition())) {
          // Filter for tags
          if (typeof filterTag === "undefined") {
              if (persps[persp]["marker"].getVisible() === false) {
                  persps[persp]["marker"].setVisible(true);
              }
          } else {
              var pass = false;
              if (persps[persp].tags.length > 0) {
                  for (var j = 0; j < persps[persp].tags.length; j++) {
                      if (persps[persp].tags[j] === filterTag) {
                          pass = true;
                      }
                  }
              }
              if (pass === true && persps[persp]["marker"].getVisible() === false) {
                  persps[persp]["marker"].setVisible(true);
              } else if (pass === false && persps[persp]["marker"].getVisible() === true) {
                  persps[persp]["marker"].setVisible(false);
              }
          }
        } else {
          persps[persp]["marker"].setVisible(false);
        }
      }

      if (infowindow.getMap()) {
        if (currentBounds.contains(infowindow.getPosition()) === false) {
          infowindow.close();
        }
      }
    };
    
    function initialize() {
      var zoom = DEFAULT_ZOOM;
      var lat = <%= @user.home_location[0] %>;
      var lng = <%= @user.home_location[1] %>;
      
      persps = {};
      var topLat;
      var bottomLat;
      var rightLng;
      var leftLng;
      var requests = 0;

      myOptions = {
        center: new google.maps.LatLng(lat, lng),
        zoom: zoom,
        panControl: false,
        mapTypeControl: false,
        scaleControl: false,
        streetViewControl: false,
        overviewMapControl: false,
        zoomControlOptions: {
          position: google.maps.ControlPosition.LEFT_CENTER
        },
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };

      map = new google.maps.Map(document.getElementById("tour_map"), myOptions);

      placemark = new google.maps.MarkerImage(
        '/images/placemarker.png',
        new google.maps.Size(30,32),
        new google.maps.Point(0, 0),
        new google.maps.Point(9, 32)
      );

      shape = {
        coord: [1,1,1,15,6,20,9,30,12,20,18,15,18,1],
        type: 'poly'
      };

      infowindow = new google.maps.InfoWindow({});

      google.maps.event.addListener(map, 'click', function() {
        infowindow.close();
        google.maps.event.trigger(map, 'idle');
      });

      google.maps.event.addListener(infowindow, 'closeclick', function() {
        google.maps.event.trigger(map, 'idle');
      })

      google.maps.event.addListener(map, 'idle', function() {
        var callServer = false;
        var bounds = map.getBounds();
        
        $('#tour_zoom').val(map.getZoom());
        $('#center_lat').val(map.getCenter().lat());
        $('#center_lng').val(map.getCenter().lng());
        $('#northeast_lat').val(bounds.getNorthEast().lat());
        $('#northeast_lng').val(bounds.getNorthEast().lng());
        $('#southwest_lat').val(bounds.getSouthWest().lat());
        $('#southwest_lng').val(bounds.getSouthWest().lng());
        
        if ((typeof topLat === "undefined") || (typeof bottomLat === "undefined") || (typeof rightLng === "undefined") || (typeof leftLng === "undefined")) {
          callServer = true;
        }

        if (callServer === false) {
          var updatedTopLat = bounds.getNorthEast().lat();
          var updatedBottomLat = bounds.getSouthWest().lat();
          var updatedRightLng = bounds.getNorthEast().lng();
          var updatedLeftLng = bounds.getSouthWest().lng();

          if ((updatedTopLat > topLat) || (updatedBottomLat < bottomLat)) {
            callServer = true;
          }

          if (callServer === false) {
            if (updatedRightLng > rightLng || updatedLeftLng < leftLng) {
              callServer = true;
            }
          }
        }

        if (callServer == true) {
          requests += 1;
          if (requests > 0) {
            $('#map_spinner').show();
          }

          if ((typeof topLat === "undefined") || (typeof bottomLat === "undefined") || (typeof rightLng === "undefined") || (typeof leftLng === "undefined")) {
            var updatedTopLat = Math.min(bounds.getNorthEast().lat() + 2*(bounds.getNorthEast().lat() - bounds.getSouthWest().lat()), 90);
            var updatedBottomLat = Math.max(bounds.getSouthWest().lat() - 2*(bounds.getNorthEast().lat() - bounds.getSouthWest().lat()), -90);
            var updatedRightLng = bounds.getNorthEast().lng() + (bounds.getNorthEast().lng() - bounds.getSouthWest().lng());
            var updatedLeftLng = bounds.getSouthWest().lng() - (bounds.getNorthEast().lng() - bounds.getSouthWest().lng());
            if (updatedRightLng > 0) {
              updatedRightLng = Math.min(180, updatedRightLng);
            }
            if (updatedRightLng < 0) {
              updatedRightLng = Math.max(-180, updatedRightLng);
            }
            if (updatedLeftLng > 0) {
              updatedLeftLng = Math.min(180, updatedLeftLng);
            }
            if (updatedLeftLng < 0) {
              updatedLeftLng = Math.max(-180, updatedLeftLng);
            }
          } else {
            var updatedTopLat = bounds.getNorthEast().lat();
            var updatedBottomLat = bounds.getSouthWest().lat();
            var updatedRightLng = bounds.getNorthEast().lng();
            var updatedLeftLng = bounds.getSouthWest().lng();
          }

          $.ajax({
            url:'<%= bounds_user_path(@user) %>',
            data: {
              top_lat: updatedTopLat,
              bottom_lat: updatedBottomLat,
              right_lng: updatedRightLng,
              left_lng: updatedLeftLng
            },
            dataType:"json",
            type:"GET",
            success: function(data) {
              updatePerspectives( data.perspectives );

              requests -= 1;
              if (requests <= 0) {
                $('#map_spinner').hide();
              }
              if ((typeof topLat === "undefined") || (typeof bottomLat === "undefined") || (typeof rightLng === "undefined") || (typeof leftLng === "undefined")) {
                topLat = updatedTopLat,
                bottomLat = updatedBottomLat,
                rightLng = updatedRightLng,
                leftLng = updatedLeftLng
              } else {
                if (updatedTopLat > topLat) {
                  topLat = updatedTopLat;
                }
                if (updatedBottomLat < bottomLat) {
                  bottomLat = updatedBottomLat;
                }
                if (updatedRightLng > rightLng) {
                  rightLng = updatedRightLng;
                }
                if (updatedLeftLng < leftLng) {
                  leftLng = updatedLeftLng;
                }
              }
            }
          });
        } else {
          updateMap();
        }
      });
    }
    
    $(document).ready(function () {
      initialize();
      $('#tour_map_holder').append('<div id="map_spinner"><img class="spinner" src="<%= asset_path("spinner.gif"); %>"></div>');
      $('#map_spinner').width(80);
      $('#map_spinner').css({
          'position':'absolute',
          'left':$('#tour_map').offset().left + 10,
          'top':$('#tour_map').offset().top + $('#tour_map').height() - 92,
          'z-index':'2'
      });
      $('#map_spinner').hide();
    });
  </script>
<% end %>

<div id="tour_entry_form">
  <%= form_for @tour, :url => {:action => "create"} do |f| %>
    <%= render :partial => 'tour', :locals => { :f => f, :user => @user } %>
  <% end %>
</div>